МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 3 з дисципліни
скриптові мови програмування





Виконала:                                                                           Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Самосватова А.Р.						          Сокорчук Ігор Петрович










Харків 2025

ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень        131.05.20250.1Початкова версія              
      

ЗАВДАННЯ

     Результатом лабораторної роботи має бути робочий сайт з інтернетмагазином. Він має складатися з таких розділів:
     1. Сторінка товарів.
     2. Сторінка «Кошик».
     Кожна сторінка має складатися з таких частин:
     1. «Шапка» сторінки,
     2. Тіло сторінки.
     3. «Підвал» або Footer сторінки.
     На сторінці товарів необхідно відобразити список доступних для покупки найменувань з можливістю вибрати кількість одиниць товарів і кнопкою «купити».
     Під час натискання на кнопку «купити», має відправлятися запит (відправка форми, методом POST) на сервер, де дані зберігаються в сесію. На сторінці «Кошик» необхідно відобразити список обраних користувачем товарів (які були збережені у сесію). Якщо ви ще не обрали жодного товару, то має бути відображений напис «Перейти до покупок» (посилання).


ХІД РОБОТИ
     У першому рядку файлу db.php відкривається PHP-тег <?php, що означає початок виконання PHP-коду. Далі використовується конструкція try-catch, яка дозволяє обробляти можливі помилки, що можуть виникнути під час спроби підключення до бази даних. Всередині блоку try створюється об’єкт $pdo класу PDO (PHP Data Objects) — універсального інтерфейсу для взаємодії з базами даних у PHP. Конструктору цього класу передається рядок підключення 'sqlite:simple_shop.db', який вказує, що підключення буде здійснено до бази даних SQLite, розташованої у файлі simple_shop.db в поточному каталозі, де знаходиться цей PHP-скрипт.
     Одразу після створення обʼєкта $pdo викликається метод setAttribute(), який дозволяє встановити параметри роботи з базою даних. У цьому випадку для параметру PDO::ATTR_ERRMODE задається значення PDO::ERRMODE_EXCEPTION. Це означає, що у разі виникнення будь-якої помилки під час взаємодії з базою даних, буде згенеровано виняток (exception). Такий підхід дозволяє централізовано обробляти всі помилки в блоці catch, що робить роботу зі скриптом більш безпечною та контрольованою.
     Якщо при спробі підключення до бази даних виникає помилка (наприклад, файл бази даних відсутній, пошкоджений або доступ до нього обмежений), керування передається до блоку catch, де відловлюється виняток класу PDOException. У тілі блоку catch викликається функція die(), яка припиняє подальше виконання скрипта та виводить повідомлення про помилку. Це повідомлення формується шляхом обʼєднання тексту "SQLite connection failed: " і тексту самої помилки, що його повертає метод getMessage() об’єкта винятку $e. Завдяки цьому, у разі помилки користувач або розробник одразу отримає детальне повідомлення про її причину.
     
      1. <?php
      2. try {
      3.     $pdo = new PDO('sqlite:simple_shop.db');
      4.     $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
      5. } catch (PDOException $e) {
      6.     die("SQLite connection failed: " . $e->getMessage());
      7. }
      8. ?>
      9.
     
     У першому рядку файлу index.php відкривається PHP-тег <?php, що означає початок виконання PHP-коду. Далі викликається функція session_start(), яка дозволяє почати або відновити сесію для поточного користувача. Це необхідно для збереження даних між різними сторінками сайту, наприклад, вмісту кошика або даних авторизації. Після цього за допомогою конструкції require_once підключається файл db.php, який містить код підключення до бази даних SQLite. Це дозволяє надалі використовувати об’єкт $pdo для виконання SQL-запитів у межах цього скрипта.
     
      1. <?php
      2. session_start();
      3. require_once 'db.php';
      4.
     
     Наступним рядком виконується SQL-запит для визначення кількості товарів у кошику. Для цього методом query() обʼєкта $pdo виконується інструкція SELECT COUNT(id) FROM cart, яка рахує кількість рядків у таблиці cart. Отриманий результат повертається у вигляді обʼєкта PDOStatement, що зберігається у змінній $countStmt. Далі методом fetchColumn() з цього обʼєкта отримується значення першого стовпця першого рядка результату — тобто кількість товарів у кошику. Результат присвоюється змінній $cartCount. Якщо значення $cartCount дорівнює null (якщо таблиця порожня), воно примусово встановлюється в 0, щоб уникнути виведення порожнього значення у навігаційному меню.
     
      5. $countStmt = $pdo->query("SELECT COUNT(id) FROM cart");
      6. $cartCount = $countStmt->fetchColumn();
      7. if ($cartCount === null) $cartCount = 0;
      8. ?>
     
     Після виконання PHP-коду починається HTML-розмітка сторінки. Вона відкривається оголошенням типу документа <!DOCTYPE html> та тегом <html> з атрибутом lang="en", який визначає мову сторінки. В розділі <head> задаються метадані сторінки: кодування UTF-8 для коректного відображення символів, заголовок сторінки <title>PHP Shop — Main</title> та підключається зовнішній CSS-файл style.css для оформлення сторінки.
     
      9. <!DOCTYPE html>
      10. <html lang="en">
      11. <head>
      12. <meta charset="UTF-8">
      13. <title>PHP Shop — Main</title>
      14. <link rel="stylesheet" href="style.css">
      15. </head>
     
     В тілі сторінки, між тегами <body>, розташовані основні елементи структури сайту. Відкривається блок <header> із назвою магазину PHP Shop. Далі йде блок <nav>, що містить навігаційне меню з трьома посиланнями: на головну сторінку (index.php), на сторінку каталогу товарів (product.php) та на сторінку кошика (cart.php). У тексті посилання на кошик використовується вставка PHP-коду <?= $cartCount ?>, яка виводить поточну кількість товарів у кошику, отриману раніше з бази даних.
     
     17. <header>PHP Shop</header>
     18. <nav>
     19.   <a href="index.php">Home</a>
     20.   <a href="product.php">Catalog</a>
     21.   <a href="cart.php">Basket (<?= $cartCount ?>)</a>
     22. </nav>
     
     Основний контент сторінки знаходиться всередині блоку <main>. Тут розташований заголовок першого рівня <h1>Welcome to PHP Shop!</h1> та абзац із текстом-запрошенням переглянути каталог товарів. У тексті абзацу міститься гіперпосилання на сторінку product.php, яке пропонує перейти до перегляду каталогу та додати товари до кошика.
     
      23. <main>
      24. <h1>Welcome to PHP Shop!</h1>
      25. <p>Check our <a href="product.php">product catalog</a> and add items to your basket.</p>
      26. </main>
     
     Наприкінці документа розташований блок <footer>, у якому відображається копірайт із поточним роком. Поточний рік динамічно підставляється за допомогою PHP-функції date('Y'), яка повертає поточний рік у числовому форматі. 

      27. <footer>© <?= date('Y') ?> PHP Shop.</footer>
      28. </body>
      29. </html>
     
     У першому рядку файлу product.php відкривається PHP-тег <?php, що означає початок виконання PHP-коду. Далі за допомогою конструкції require_once 'db.php' підключається файл з налаштуваннями підключення до бази даних SQLite, що дозволяє надалі використовувати об’єкт $pdo для виконання SQL-запитів.
     
      1. <?php
      2. require_once 'db.php';
      
     Далі відбувається перевірка типу HTTP-запиту. Якщо поточний запит є POST-запитом (тобто сторінка отримала дані з форми методом POST), тоді виконується обробка надісланих даних. Для цього із суперглобального масиву $_POST зчитуються два масиви: product_id та quantity. Якщо жоден з них не переданий, за замовчуванням використовується порожній масив (через оператор ?? []).
      3. 
      4. if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      5.     $productIds = $_POST['product_id'] ?? [];
      6.     $quantities = $_POST['quantity'] ?? [];
      7.
     
     Далі за допомогою циклу foreach перебираються всі передані ідентифікатори товарів $productIds. Для кожного елемента визначається його кількість $qty, яку користувач вказав у відповідному полі форми. Ідентифікатор товару $productId та кількість $qty примусово приводяться до цілочисельного типу за допомогою (int) для запобігання помилкам чи некоректним даним.
     Після цього відбувається перевірка: якщо кількість $qty більше 0, то виконується вставка нового запису у таблицю cart. Для цього створюється підготовлений запит методом prepare() з SQL-інструкцією INSERT INTO cart (product_id, quantity) VALUES (?, ?), яка дозволяє безпечно передавати значення у запит. Далі викликається метод execute() і передається масив із двох елементів — ідентифікатора товару та його кількості. Після завершення циклу користувача перенаправляють на сторінку cart.php за допомогою функції header('Location: cart.php'), а виконання скрипта припиняється командою exit.
     
      8.     foreach ($productIds as $index => $productId) {
      9.         $qty = (int)($quantities[$index] ?? 0);
      10.         $productId = (int)$productId;
      11. 
      12.         if ($qty > 0) {
      13.            
      14.             $stmt = $pdo->prepare("INSERT INTO cart (product_id, quantity) VALUES (?, ?)");
      15.             $stmt->execute([$productId, $qty]);
      16.         }
      17.     }
      18.     header('Location: cart.php');
      19.     exit;
      20. }
     
     Далі виконується запит до бази даних для отримання списку всіх товарів. Це здійснюється методом query() з SQL-інструкцією SELECT * FROM products. Отримані результати перетворюються у масив асоціативних масивів за допомогою методу fetchAll(PDO::FETCH_ASSOC) і зберігаються у змінній $products. Після чого виконується запит для визначення кількості товарів у кошику. Для цього методом query() виконується SQL-інструкція SELECT COUNT(*) FROM cart, яка повертає кількість записів у таблиці cart. Результат зчитується методом fetchColumn() і записується у змінну $cartCount.
      
      21. 
      22. 
      23. $products = $pdo->query("SELECT * FROM products")->fetchAll(PDO::FETCH_ASSOC);
      24. 
      25. $countStmt = $pdo->query("SELECT COUNT(*) FROM cart");
      26. $cartCount = $countStmt->fetchColumn();
      27. ?>
      
     Основна частина сторінки міститься між тегами <body>. Спочатку виводиться заголовок у блоці <header> із текстом Product Catalog. Далі формується меню навігації в блоці <nav>, яке містить посилання на головну сторінку, каталог товарів та кошик. У посиланні на кошик динамічно виводиться кількість товарів у кошику, отримана раніше за допомогою PHP-вставки <?= $cartCount ?>.
     Основний контент сторінки розміщується в блоці <main>. Спочатку виводиться заголовок другого рівня <h2>Products</h2>. Далі розташовується форма з атрибутом method="post", що дозволяє надсилати дані на цю ж сторінку методом POST. У середині форми є контейнер <div class="products-list">, всередині якого за допомогою циклу foreach виводяться всі товари з масиву $products.
     
      28. 
      29. <!DOCTYPE html>
      30. <html lang="en">
      31. <head>
      32. <meta charset="UTF-8">
      33. <title>Product Catalog</title>
      34. <link rel="stylesheet" href="style.css">
      35. </head>
      36. <body>
      37. <header>Product Catalog</header>
      38. <nav>
      39.   <a href="index.php">Home</a>
      40.   <a href="product.php">Catalog</a>
      41.   <a href="cart.php">Basket (<?= $cartCount ?>)</a>
      42. </nav>
      43. <main>
      44. <h2>Products</h2>
      45. 
      46. <form method="post">
      47.   <div class="products-list">
      48.     <?php foreach ($products as $product): ?>
      
     Для кожного товару формується блок <div class="product-item">, який містить назву товару, його вартість у форматі доларів з двома знаками після коми, приховане поле <input type="hidden"> з ідентифікатором товару та поле введення <input type="number"> для вибору кількості товару. Мінімальне допустиме значення кількості — 0, а початкове значення встановлюється у 0.
     
      49.     <div class="product-item">
      50.       <div><?= htmlspecialchars($product['name']) ?> — $<?= number_format($product['cost'], 2) ?></div>
      51.       <input type="hidden" name="product_id[]" value="<?= $product['id'] ?>">
      52.       <input type="number" name="quantity[]" min="0" value="0">
      53.     </div>
      54.     <?php endforeach; ?>
      55.   </div>
      
     Після виведення всіх товарів формується кнопка <button type="submit">Add Selected to Cart</button>, яка дозволяє користувачеві додати вибрані товари до кошика. Наприкінці сторінки у блоці <footer> виводиться копірайт із поточним роком, який автоматично підставляється за допомогою PHP-функції date('Y').
     
      56.   <button type="submit">Add Selected to Cart</button>
      57. </form>
      58. 
      59. </main>
      60. <footer>© <?= date('Y') ?> PHP Shop.</footer>
      61. </body>
      62. </html>
      
     На початку файлу відкривається PHP-блок <?php, після чого за допомогою конструкції require 'db.php' підключається файл із налаштуваннями підключення до бази даних, щоб отримати доступ до об’єкта $pdo для виконання SQL-запитів. Далі виконується перевірка, чи був запит до сторінки виконаний методом POST і чи передано у ньому параметр remove_id. Якщо так, то значення цього параметра зчитується у змінну $removeId та примусово перетворюється на ціле число для захисту від помилкових або шкідливих значень. Після цього формується підготовлений SQL-запит для видалення товару з кошика. Для цього викликається метод prepare() з SQL-інструкцією DELETE FROM cart WHERE id = ?, яка дозволяє безпечно передавати параметри до запиту. Методом execute() передається масив із єдиним елементом — ідентифікатором рядка, який потрібно видалити.
     Після виконання запиту відбувається перенаправлення користувача на цю ж сторінку cart.php командою header('Location: cart.php'), що дозволяє уникнути повторного надсилання форми при оновленні сторінки. Далі скрипт примусово завершується командою exit.
     
      1. <?php
      2. require 'db.php';
      3. 
      4. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove_id'])) {
      5.     $removeId = (int)$_POST['remove_id'];
      6.     $stmt = $pdo->prepare("DELETE FROM cart WHERE id = ?");
      7.     $stmt->execute([$removeId]);
      8.     header('Location: cart.php');
      9.     exit;
      10. }
     
     Виконується вибірка всіх товарів у кошику. Для цього формується SQL-запит методом query(), у якому здійснюється об’єднання двох таблиць cart і products за допомогою операції JOIN по полю product_id. Це дозволяє отримати інформацію про назву товару, його вартість, кількість у кошику та відповідні ідентифікатори. Результати запиту перетворюються у масив асоціативних масивів за допомогою методу fetchAll(PDO::FETCH_ASSOC) і зберігаються у змінній $cartItems.
      
11. 
12. 
13. $stmt = $pdo->query("SELECT cart.id AS cart_id, products.id AS product_id, products.name, products.cost, cart.quantity
14.                      FROM cart
15.                      JOIN products ON cart.product_id = products.id");
16. $cartItems = $stmt->fetchAll(PDO::FETCH_ASSOC);
17. ?>

     Далі починається HTML-розмітка сторінки, яка оголошується тегом <!DOCTYPE html> і відкривається тегом <html> із атрибутом lang="en". У блоці <head> задається кодування UTF-8, заголовок сторінки <title>Your Cart</title> та підключається таблиця стилів style.css.
     У блоці <body> формується заголовок сторінки у блоці <header> із текстом Your Basket. Далі створюється навігаційне меню в блоці <nav>, яке містить посилання на головну сторінку, каталог товарів та кошик. У посиланні на кошик динамічно виводиться кількість товарів у кошику, що визначається функцією count($cartItems) — тобто кількістю елементів у масиві товарів.
     Основний вміст сторінки розташовується в блоці <main>. Тут спочатку виводиться заголовок <h2>Cart</h2>. Далі за допомогою умовного виразу if (!empty($cartItems)) перевіряється, чи є в кошику товари. Якщо так — формується таблиця з товарами.
     
      18. 
      19. <!DOCTYPE html>
      20. <html lang="en">
      21. <head>
      22. <meta charset="UTF-8">
      23. <title>Your Cart</title>
      24. <link rel="stylesheet" href="style.css">
      25. </head>
      26. <body>
      27. <header>Your Basket</header>
      28. <nav>
      29.   <a href="index.php">Home</a>
      30.   <a href="product.php">Catalog</a>
      31.   <a href="cart.php">Basket (<?= count($cartItems) ?>)</a>
      32. </nav>
      33. <main>
      34. <h2>Cart</h2>
      35. 
      36. <?php if (!empty($cartItems)): ?>
     
     Таблиця починається з заголовків колонок: Product, Price, Quantity, Sum та пустої колонки для кнопки видалення. Далі визначається змінна $total, яка слугуватиме для підрахунку загальної суми кошика.
     Циклом foreach перебираються всі товари у масиві $cartItems. Для кожного товару обчислюється проміжна сума рядка $lineSum як добуток ціни товару на його кількість, а також до загальної суми додається значення $lineSum.
     
37. <table>
38. <thead>
39.   <tr>
40.     <th>Product</th>
41.     <th>Price</th>
42.     <th>Quantity</th>
43.     <th>Sum</th>
44.     <th></th>
45.   </tr>
46. </thead>
47. <tbody>
48. <?php
49. $total = 0;
50. foreach ($cartItems as $item):
51.     $lineSum = $item['cost'] * $item['quantity'];
52.     $total += $lineSum;
53. ?>

      У кожному рядку таблиці відображаються: назва товару, 
     * Ціна товару.
     * Кількість товару.
     * Проміжна сума рядка.
     * Кнопка для видалення товару з кошика, яка реалізована через форму з прихованим полем remove_id, що містить ідентифікатор рядка кошика, та кнопкою Remove.
      
      54. <tr>
      55.   <td><?= htmlspecialchars($item['name']) ?></td>
      56.   <td>$<?= number_format($item['cost'], 2) ?></td>
      57.   <td><?= $item['quantity'] ?></td>
      58.   <td>$<?= number_format($lineSum, 2) ?></td>
      59.   <td>
      60.     <form method="post" style="display:inline">
      61.       <input type="hidden" name="remove_id" value="<?= $item['cart_id'] ?>">
      62.       <button type="submit">Remove</button>
      63.     </form>
      64.   </td>
      65. </tr> 

     Після виведення всіх товарів формується підсумковий рядок таблиці, у якому вказується загальна сума кошика, форматована у вигляді доларів з двома знаками після коми. 
     
      68.   <th colspan="3">Total</th>
      69.   <th colspan="2">$<?= number_format($total, 2) ?></th>
      70. </tr>
      71. </tbody>
      72. </table>
      73. 
      
     Якщо кошик порожній, у блоці else виводиться повідомлення Your basket is empty. та посилання на сторінку каталогу товарів product.php. Наприкінці сторінки у блоці <footer> виводиться копірайт із поточним роком за допомогою PHP-функції date('Y'). 
      74. <?php else: ?>
      75. <p>Your basket is empty. <a href="product.php">Go to catalog</a></p>
      76. <?php endif; ?>
      77. 
      78. </main>
      79. <footer>© <?= date('Y') ?> PHP Shop.</footer>
      80. </body>
      81. </html> 

      ВИСНОВКИ
      У ході виконання лабораторної роботи було розроблено веб-додаток на мові PHP, який моделює функціонування онлайн-магазину. Програма реалізує головне меню з переходами між сторінками, можливість вибору товарів, додавання їх до кошика, перегляд його вмісту, видалення окремих позицій і обчислення загальної вартості замовлення. Під час розробки були закріплені практичні вміння роботи з PHP-сесіями, організацією підключення до бази даних SQLite через PDO та виконанням SQL-запитів для вибірки, вставки і видалення даних. Було застосовано базові принципи побудови структури веб-сторінок із використанням PHP і HTML, створення інтерактивних форм та обробки даних, які надсилає користувач через метод POST.
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      



     ДОДАТОК А
     Посилання на YouTube
      
      Відеозапис презентації результатів лабораторної роботи: 
    https://youtu.be/cvFs36Ua1cw
    00:00 - Привітання та завдання до лабораторної роботи 
    00:22 - Файл db.php - підключення до бази даних 
    00:51 - Файл index.php. Відкриття php тегу 
    00:57 - Функція session_start 
    01:23 - Підключення до файлу db.php 
    01:40 - SQL запит для визначення кількості товарі в у кошику 
    02:54 - HTML розмітка головної сторінки 
    04:49 - Файл product.php. Відкриття php тегу 
    04:55 - Підключення до файлу db.php 
    05:56 - Перевірка типу http запиту 
    05:53 - Зведення кількості та id до типу int. Перевірка кількості. Вставка даних у корзину за допомогою запиту 
    06:31 - Запит для отримання списку усіх товарів та визначення кількості товарів у кошику 
    07:22 - HTML розмітка сторінки каталогу товарів 
    09:29 - Файл cart.php. Відкриття php тегу. Підключення до файлу db.php 
    09:45 - Перевірка чи був запит до сторінки виконано методом post та чи передано необхідний параметр. Запит на видалення товару з кошика. 
    10:47 - SQL запит на об'єднання двох таблиць - cart та products. 
    11:32 - HTML розмітка сторінки кошика 
    12:03 - Перевірка наявності товарів у кошику 
    12:20 - Рахуємо загальну суму у кошику 
    13:39 -Результат виконання
        

    ДОДАТОК Б
    
    GitHub репозиторій: https://github.com/NureSamosvatovaAnastasiia/smp-pzpi-23-5-samosvatova-anastasiia/tree/main/Lab3/smp-pzpi-23-5-samosvatova-anastasiia-lab3
      
      
      
      

2


