МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ





Звіт
з практичної роботи № 1
з дисципліни
«Скриптові мови програмування»









Виконав:	Перевірив
ст. гр. ПЗПІ-23-5	ст. викладач кафедри ПІ
Самосватова А. Р.	Сокорчук Ігор Петрович














2025
ЗАВДАННЯ

     Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
     Ялинка повинна бути симетричною. Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу. Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску. Параметри скрипта повинні мати додатне значення. Вказані значення повинні округлятися до потрібних у меншу сторону.
     Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
ХІД РОБОТИ
     Створюємо новий скрипт з назвою pzpi-23-5-samosvatova-anastasiia-task1,
використовуючи команду touch. Оголошуємо командний інтерпретатор.
	Оголошуємо функцію printRow. Функція printRow призначена для виводу одного рядка дерева з відступами зліва, щоб забезпечити центроване вирівнювання.
      1. #!/bin/bash
      2. 
      3. printRow() {
      4.     local rowWidth=$1
      5.     local totalWidth=$2
      6.     local symbol=$3
      7.     local padding=$(( (totalWidth - rowWidth) / 2 ))
      8.     printf "%*s" "$padding" ""
      9.     for ((i=0; i<rowWidth; i++)); do
      10.         printf "%s" "$symbol"
      11.     done
      12.     echo
      13. }
     Далі перевіряємо кількість переданих аргументів. Перевіряється, чи передано рівно два параметри — висоту дерева та ширину шару снігу. Якщо ні, скрипт виводить повідомлення про помилку та завершується з кодом 1. Зберігаємо значення параметрів. Перший аргумент зберігається у змінну treeHeight (висота ялинки), другий — у snowWidth (ширина шару снігу).
      15. if [[ $# -ne 2 ]]; then
      16.     echo "Помилка: потрібно вказати висоту дерева та ширину снігу." >&2
      17.     exit 1
      18. fi
      19. 
      20. treeHeight=$1
      21. snowWidth=$2
     Далі перевіряється, чи обидва параметри є додатними цілими числами, не меншими за 7. У разі порушення — помилка та завершення з кодом 1. Наступним кроком виправляється парність ширини снігу. Якщо ширина снігу парна, зменшується на 1 для збереження симетрії дерева.
      23. if ! [[ $treeHeight =~ ^[0-9]+$ && $snowWidth =~ ^[0-9]+$ ]] || (( treeHeight < 7 || snowWidth < 7 )); then
      24.  echo "Помилка: параметри мають бути додатні числа не менше 7." >&2
      25.     exit 1
      26. fi
      28. ((snowWidth % 2 == 0)) && ((snowWidth--))
     Перевірка відповідності ширини снігу до максимальної ширини дерева. Обчислюється максимальна ширина гілок ялинки. Якщо вона не збігається з шириною снігу — виводиться помилка і скрипт завершується.
      30. maxWidth=$((2 * (treeHeight / 2) - 1))
      31. ((snowWidth != maxWidth)) && { echo "Ширина снігу має дорівнювати максимальній ширині дерева." >&2; exit 1; }
     Виведення верхівки ялинки та розрахунок параметрів для гілок.
      33. currentSymbol="#"
      34. printf "%*s*\n" $(((snowWidth - 1) / 2)) ""
      35. 
      36. layerHeight=$(( (snowWidth - 3) / 2 ))
      37. availableLines=$(( treeHeight - 4 ))
      38. oneLayerHeight=$(( 2 * layerHeight ))
      39. layerCount=$(( availableLines / oneLayerHeight ))
     Виведення гілок дерева. Використовується вкладений цикл для побудови гілок. Для кожного ярусу (layer) будується дві секції гілок (side).
      41. for ((layer=0; layer<layerCount; layer++)); do
      42.     for ((side=0; side<2; side++)); do
      43.         rowWidth=3
      44.         rowCount=0
      45.         while ((rowCount < layerHeight)); do
      46.             printRow "$rowWidth" "$snowWidth" "$currentSymbol"
      47.             ((rowWidth+=2))
      48.             ((rowCount++))
      49.             currentSymbol=$([[ "$currentSymbol" == "#" ]] && echo "*" || echo "#")
      50.         done
      51.     done
      52. done
     Виведення стовбура. Стовбур ялинки складається з двох рядків по 3 символи #, центрованих по ширині снігу.
      54. for i in 1 2; do
      55.     printRow 3 "$snowWidth" "#"
      56. done
     Виведення шару снігу. Виводиться рядок з *, довжиною snowWidth. Це нижній шар снігу під ялинкою.
      58. count=0
      59. until ((count == snowWidth)); do
      60.     printf "*"
      61.     ((count++))
      62. done
     Після цього надаємо скрипту права на виконання за допомогою команди chmod.
chmod +x ./ pzpi-23-5-samosvatova-anastasiia-task1

ВИСНОВКИ
     Під час практичної роботи я здобула досвід у написанні Bash-скриптів, освоїла різні конструкції мови, зокрема функції, умовні оператори та цикли. Я навчилася використовувати цикли для ітерацій, умовні конструкції для перевірки логіки, а також створювати функції для повторного використання коду.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     ДОДАТОК А
     Посилання на YouTube
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/eYR2q9O1IZ4
     00:00 - Привітання. 
     00:09 - Призначення першого рядка 
     00:17 - Функція printPow 
     00:57 - Перевірка кількості аргументів 
     01:27 - Перевірка аргументів 
     02:42 - Структура дерева 
     03:38 - Цикл для побудови дерева 
     04:17 - Малюємо стовбур та шар снігу 
     04:45 - Результат виконання скрипта
     


     ДОДАТОК В
     GitHub репозиторій: https://github.com/NureSamosvatovaAnastasiia/smp-pzpi-23-5-samosvatova-anastasiia/blob/main/Pract1/smp-pzpi-23-5-samosvatova-anastasiia-pract1/smp-pzpi-23-5-samosvatova-anastasiia-pract1-code


