МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 2 з дисципліни
скриптові мови програмування





Виконала:                                                                         Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Самосватова А. Р.						Сокорчук Ігор Петрович










Харків 2025

ЗАВДАННЯ

     Створіть консольний застосунок на PHP «Продовольчий магазин "Анастасія"» у файлі ~/імʼя_облікового_запису-task3.php. Після запуску програма має виводити головне меню з пунктами: 1 – Вибрати товари, 2 – Отримати підсумковий рахунок, 3 – Налаштувати свій профіль, 0 – Вийти з програми.
     Після введення команди програма має виконувати відповідну дію або виводити повідомлення про помилку, якщо команда некоректна. При виборі пункту 1 користувач потрапляє в меню вибору товарів, де може додавати їх до кошика, вводячи номер товару та кількість (0 — видаляє товар). Після кожної дії кошик оновлюється. При натисканні 0 — повернення до головного меню. При виборі пункту 2 виводиться рахунок: список товарів з ціною, кількістю та загальною сумою. Пункт 3 дозволяє ввести імʼя (не може бути порожнім) та вік (від 7 до 150 років). Програма має перевіряти всі введення: правильність команд, номерів товарів, кількості, ім’я й вік. Робота застосунку повинна повністю відповідати прикладовій програмі pzpi23-php-task3-exampl.


ХІД РОБОТИ
     У першому рядку вказано шебанг #!/bin/php, що дозволяє запускати скрипт напряму в Unix-системах як виконуваний файл, використовуючи інтерпретатор PHP.
     Далі відкривається PHP-тег, і створюється асоціативний масив $products. У цьому масиві кожному числовому ключу відповідає масив із двома значеннями: name (назва товару) та price (його ціна в гривнях). Перелік містить сім товарів, зокрема продукти харчування, такі як морозиво, лаваш, сир, сметана, кефір, вода та авокадо. Цей масив, ймовірно, буде використано пізніше в програмі для формування списку покупок або розрахунку загальної вартості.
      1. #!/bin/php
      2. <?php
      3. 
      4. $products = [
      5.     1 => ['name' => 'Морозиво "Гран-прі"', 'price' => 25],
      6.     2 => ['name' => 'Лаваш', 'price' => 70],
      7.     3 => ['name' => 'Сир КОМО', 'price' => 21],
      8.     4 => ['name' => 'Сметана 15%', 'price' => 45],
      9.     5 => ['name' => 'Кефір 3%', 'price' => 19],
      10.     6 => ['name' => 'Вода слабогазована 2л', 'price' => 28],
      11.     7 => ['name' => 'Авокадо', 'price' => 114],
      12. ];
     Після оголошення масиву з товарами, програма ініціалізує дві ключові структури даних, необхідні для подальшої взаємодії з користувачем. По-перше, створюється порожній масив $basket, який буде виконувати роль кошика покупця. У цей масив додаватимуться товари, обрані користувачем у процесі роботи програми. По-друге, ініціалізується масив $profile з двома полями: name та age, обидва мають початкове значення null. Цей масив призначено для збереження персональних даних користувача — імені та віку — які, ймовірно, будуть запитані та збережені на початку або в процесі взаємодії з системою. Таким чином, програма готується до персоналізованої роботи з користувачем і динамічного обліку обраних товарів.
      14. $basket = [];
      15. $profile = ['name' => null, 'age' => null];
     Далі оголошуватимемо функцію printMenu(), яка відповідатиме за формування головного текстового інтерфейсу програми. У цій функції на екран виводитиметься декоративна рамка з назвою магазину — «Продовольчий магазин "Анастасія"». Після цього користувачу буде запропоновано чотири основні пункти меню: перший — дозволить вибрати товари зі списку та додати їх до кошика; другий — дасть змогу отримати підсумковий рахунок, у якому відображатиметься загальна вартість усіх обраних товарів; третій — відкриватиме доступ до налаштування профілю, де користувач зможе ввести або змінити свої особисті дані (ім’я та вік); четвертий — завершуватиме роботу програми. У кінці меню буде виведено запрошення до введення команди, після чого програма очікуватиме введення числа, що відповідає бажаній дії. Таким чином, функція printMenu() виконуватиме роль головного навігаційного елементу в консольному додатку.
      17. function printMenu() {
      18.     echo "#######################################\n";
      19.     echo "#   ПРОДОВОЛЬЧИЙ МАГАЗИН \"АНАСТАСІЯ\"  #\n";
      20.     echo "#######################################\n";
      21.     echo "1 Вибрати товари\n";
      22.     echo "2 Отримати підсумковий рахунок\n";
      23.     echo "3 Налаштувати свій профіль\n";
      24.     echo "0 Вийти з програми\n";
      25.     echo "Введіть команду: ";
      26. }
     Функція printProducts($products) призначена для виведення на екран списку товарів, які містяться в масиві $products. Вона приймає цей масив як аргумент і виводить інформацію у вигляді таблиці з трьома стовпцями: номер товару, назва товару та його ціна. Спочатку виводяться заголовки стовпців та горизонтальний роздільник для покращення сприйняття даних. Потім у циклі перебираються всі товари в масиві, і для кожного товару виводяться його номер, назва та ціна у відформатованому вигляді за допомогою функції printf. Формат виведення забезпечує вирівнювання стовпців: номер товару займає два символи, назва товару — до 30 символів, а ціна — 10 символів, що створює акуратну таблицю. Після цього виводиться горизонтальний роздільник та опція "0 ПОВЕРНУТИСЯ", яка дає користувачеві можливість повернутися до попереднього меню. Завдяки цьому функція надає зручне та зрозуміле відображення списку товарів.
      28. function printProducts($products) {
      29.     echo "№  НАЗВА                             ЦІНА\n";
      30.     echo "   --------------------------------------\n";
      31.     foreach ($products as $key => $product) {
      32.         printf("%-2d %-30s %10d\n", $key, $product['name'], $product['price']);
      33.     }
      34.     echo "   --------------------------------------\n";
      35.     echo "0  ПОВЕРНУТИСЯ\n";
      36. }
     Функція clearScreen() призначена для очищення екрану або забезпечення виведення порожнього рядка, що допомагає створити візуальну паузу між різними етапами виконання програми. Вона складається з одного виклику функції echo, що виводить символ нового рядка (\n). Це дозволяє очищувати поточну частину виводу або переміщувати користувача до нової частини інтерфейсу, що сприяє кращій організації виведення та покращенню користувацького досвіду.
      40. function clearScreen() {
      41.     echo "\n";
      42. }
     Далі код реалізує основний цикл програми, який постійно запитує користувача про вибір опції через меню. Спочатку викликається функція printMenu(), яка виводить доступні варіанти меню на екран. Далі програма чекає на введення користувача через стандартний ввід, і отриманий вибір обробляється за допомогою конструкції switch. Якщо користувач вибирає пункт меню '1', програма переходить у внутрішній цикл, де користувач може вибрати товар з наданого списку. Цей цикл включає в себе кілька важливих кроків: спочатку викликається функція clearScreen(), щоб очистити екран перед відображенням нового списку товарів, потім виводиться список товарів за допомогою функції printProducts(). Користувачеві пропонується ввести номер товару для вибору. Якщо введено '0', цикл переривається, і користувач повертається до головного меню. Якщо введено неправильний номер товару, програма виводить повідомлення про помилку і пропонує вибрати правильний товар. Цей підхід дозволяє динамічно працювати з вибором товарів і забезпечує інтерактивний процес, де користувач може коригувати свої вибори, якщо вони були введені неправильно.
      44. while (true) {
      45.     printMenu();
      46.     $choice = trim(fgets(STDIN));
      47. 
      48.     switch ($choice) {
      49.         case '1':
      50.             while (true) {
      51.                 clearScreen();
      52.                 printProducts($products);
      53.                 echo "Виберіть товар: ";
      54.                 $item = trim(fgets(STDIN));
      55.                 if ($item == '0') break;
      56.                 if (!isset($products[$item])) {
      57.                     echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
      58.                     continue;
      59.                 }
     Наступним кроком оброблятиме вибір товару користувачем і запитуватиме у нього кількість одиниць товару. Після того, як користувач вибере товар, програма виведе його назву для підтвердження вибору. Потім користувачеві запропонують ввести кількість одиниць товару, яку він хоче придбати. Якщо введена кількість не буде числом або вийде за допустимі межі (менше 1 або більше 100), програма виведе повідомлення про помилку і попросить користувача ввести коректну кількість. Цей підхід дозволить забезпечити правильність введених даних і уникнути помилок при обробці замовлення.
      61.                 echo "Вибрано: " . $products[$item]['name'] . "\n";
      62.                 echo "Введіть кількість, штук: ";
      63.                 $qty = trim(fgets(STDIN));
      64.                 if (!is_numeric($qty) || $qty < 0 || $qty > 100) {
      65.                     echo "ПОМИЛКА! Введіть коректну кількість (1-100)\n";
      66.                     continue;
      67.                 }
     Наступний фрагмент коду оброблятиме ситуацію, коли користувач вводить кількість одиниць товару для додавання в кошик або його видалення. Якщо користувач вводить 0 як кількість, програма видалятиме товар з кошика за допомогою функції unset(). Після цього виведеться повідомлення "ВИДАЛЯЮ З КОШИКА". Якщо кошик стане порожнім після видалення товару, програма виведе повідомлення "КОШИК ПОРОЖНІЙ". Якщо ж кількість товару більша за 0, то товар буде доданий або оновлений у кошику з вказаною кількістю. Цей механізм дозволить користувачеві коригувати вміст кошика, додаючи або видаляючи товари відповідно до своїх потреб.
      69.                 if ($qty == 0) {
      70.                     unset($basket[$item]);
      71.                     echo "ВИДАЛЯЮ З КОШИКА\n";
      72.                     if (empty($basket)) echo "КОШИК ПОРОЖНІЙ\n";
      73.                 } else {
      74.                     $basket[$item] = $qty;
      75.                 }
     Далі виводитимемо інформацію про товари, які користувач додав до кошика, і їх кількість. Спочатку виводиться заголовок "У КОШИКУ" та назви стовпців "НАЗВА" і "КІЛЬКІСТЬ". Потім за допомогою циклу foreach програма перебирає всі елементи масиву $basket, де кожен елемент містить товар і його кількість. Для кожного товару програма виводить його назву (взята з масиву $products) та кількість, яку вибрав користувач. Після цього цикл завершується, і програма повертається до попереднього етапу. Це дозволяє користувачеві побачити список товарів у кошику разом з їх кількістю перед тим, як зробити подальші дії, наприклад, оформити замовлення.
      77.                 echo "У КОШИКУ:\nНАЗВА        КІЛЬКІСТЬ\n";
      78.                 foreach ($basket as $id => $q) {
      79.                     echo $products[$id]['name'] . "  " . $q . "\n";
      80.                 }
      81.             }
      82.             break;
     Наступним кроком оброблятимемо вибір користувача, коли він хоче побачити підсумковий рахунок за всі товари в кошику. Спочатку програма очистить екран, викликавши функцію clearScreen(). Потім виведе заголовки стовпців для підсумкового списку: номер товару, назва, ціна, кількість і вартість. Далі за допомогою циклу foreach програма обробить кожен товар в кошику, обчислюючи вартість кожного товару, множачи кількість на ціну. Для кожного товару буде виведена відформатована таблиця з його номером, назвою, ціною, кількістю та вартістю. Після цього виводиться загальна сума до сплати, яка обчислюється шляхом додавання вартості кожного товару в змінну $total. Наприкінці програма виведе підсумкову суму, яку користувач повинен заплатити за весь кошик. Цей крок дозволить користувачеві переглянути деталі замовлення і побачити загальну суму.
      84.         case '2':
      85.             clearScreen();
      86.             echo "№  НАЗВА                    ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
      87.             $total = 0;
      88.             $num = 1;
      89.             foreach ($basket as $id => $qty) {
      90.                 $name = $products[$id]['name'];
      91.                 $price = $products[$id]['price'];
      92.                 $cost = $qty * $price;
      93.                 printf("%-2d %-30s %5d %9d %8d\n", $num++, $name, $price, $qty, $cost);
      94.                 $total += $cost;
      95.             }
      96.             echo "РАЗОМ ДО CПЛАТИ: $total\n";
      97.             break;
     Наступний фрагмент коду оброблятиме вибір користувача для налаштування свого профілю. Програма запросить ім'я користувача, перевіряючи, чи містить воно хоча б одну літеру за допомогою регулярного виразу. Якщо ім'я не відповідає цьому формату, програма виведе помилку і повернеться до головного меню. Потім користувача попросять ввести свій вік, де програма перевірить, чи є вік числовим значенням і чи знаходиться він у межах від 7 до 150 років. Якщо вік не відповідає вимогам, буде виведена помилка. Якщо ж ім'я та вік будуть введені правильно, програма оновить масив профілю $profile і повідомить користувача, що профіль було успішно оновлено. Цей крок дозволяє користувачу встановити або змінити свої особисті дані в системі.
      99.         case '3':
      100.             echo "Ваше імʼя: ";
      101.             $name = trim(fgets(STDIN));
      102.             if (!preg_match('/[a-zA-Zа-яА-ЯіІїЇєЄ]/u', $name)) {
      103.                 echo "ПОМИЛКА! Імʼя повинно містити хоча б одну літеру.\n";
      104.                 break;
      105.             }
      106.             echo "Ваш вік: ";
      107.             $age = trim(fgets(STDIN));
      108.             if (!is_numeric($age) || $age < 7 || $age > 150) {
      109.                 echo "ПОМИЛКА! Вік має бути від 7 до 150.\n";
      110.                 break;
      111.             }
      112.             $profile['name'] = $name;
      113.             $profile['age'] = $age;
      114.             echo "Профіль оновлено.\n";
      115.             break;
     Обробляємо випадок, коли користувач вибирає вихід з програми. Програма виведе подяку за візит до магазину, повідомивши: "Дякуємо за візит до магазину 'АНАСТАСІЯ'!" після чого виконає команду exit(0), що призведе до завершення виконання скрипта. Цей крок дозволяє коректно завершити роботу програми після того, як користувач вирішить вийти з системи.
      117.         case '0':
      118.             echo "Дякуємо за візит до магазину \"АНАСТАСІЯ\"!\n";
      119.             exit(0);
      
     Обробляємо випадок, коли користувач вводить неправильну команду, яка не відповідає жодному з варіантів меню. Якщо введена команда не відповідає жодному з варіантів, програма виведе повідомлення про помилку: "ПОМИЛКА! Введіть правильну команду". Після цього програма повернеться до початку циклу, щоб знову показати меню і дати користувачеві можливість зробити правильний вибір. Це дозволяє уникнути помилок і забезпечити правильний потік взаємодії з користувачем, якщо він випадково вибере некоректну команду.
      
      121.         default:
      122.             echo "ПОМИЛКА! Введіть правильну команду\n";
      123.     }
      124. }
      125. ?>



ВИСНОВОК
     У результаті виконання завдання було розроблено консольний застосунок "Продовольчий магазин 'Анастасія'", який забезпечує функціональність для вибору товарів, формування підсумкового рахунку та налаштування профілю користувача. Програма реалізує головне меню, яке дозволяє користувачеві вибирати різні опції за допомогою числових команд. Кожна з команд виконує певні дії, наприклад, у пункті вибору товарів можна додавати або видаляти товари з кошика, у пункті підсумкового рахунку виводяться деталі покупок, а в пункті налаштування профілю користувач може ввести своє ім’я та вік.
     Особливу увагу було приділено перевірці введених даних. Кожен введений параметр — від номера товару до імені та віку користувача — перевіряється на коректність. Програма враховує, що ім’я повинно бути непорожнім, а вік — у межах від 7 до 150 років. Також користувач не зможе ввести некоректну кількість товару або команду.
     Завдання допомогло розвинути навички роботи з PHP, зокрема, з масивами, циклами, умовними конструкціями та функціями для взаємодії з користувачем у консольному застосунку. Програма була реалізована з урахуванням усіх вимог завдання та демонструє базові принципи створення інтерактивних консольних програм з перевіркою введених даних.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК А
Посилання на YouTube
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/0flk9hhXeQA

     00:00 Привітання 
     00:10 Призначення першого рядка 
     00:25 Створення масиву продуктів, кошику та профілю 
     01:27 Функція для друку головного меню 
     02:07 Функція для друку переліку товарів 
     03:12 Функція для візуального розділення контенту 
     03:34 Початок основного циклу програми. Перша команда 
     06:46 Друга команда 
     07:40 Третя команда 
     08:22 Команда 0 
     09:03 Результат
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК Б
     GitHub репозиторій: https://github.com/NureSamosvatovaAnastasiia/smp-pzpi-23-5-samosvatova-anastasiia/blob/main/Lab2/smp-pzpi-23-5-samosvatova-anastasiia-lab2/smp-pzpi-23-5-samosvatova-anastasiia-lab2-code.php
     
     
     
     
     
     
     
     
     
     

